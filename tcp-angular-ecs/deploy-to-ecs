#!/bin/bash

# Deploy the containers for the service into the ECS cluster
# This script does NOT wait until the deployed containers are actually RUNNING
# Pushes (to ECR) the local image tagged with whatever label was given to configure-for-ecs.
#
# Assumes it is run in the ECS service subdirectory (where the ECS docker-compose.yml is);
# assumes configure-for-ecs has already been run for the environment we're deploying to;
# assumes credentials are already set up in the default aws profile;
# assumes name of cluster to deploy to is in SSM key "/$PROJECT/$ENV/cluster/id";
# sets the default ecs-cli cluster to that cluster.

# Fail on any error; unset variables are errors; show commands before executing:
set -eux
PROJECT="$1"
ENV="$2"
aws_region="$3"

# TODO: see if logging anything from this script would be helpful

# TODO: make sure we're in the correct directory (with ECS docker-compose.yml in it)

echo "=== deploy-to-ecs - $ENV ==="
date
start_time=$(date +%s)

echo "Running in $PWD"
echo "Project = $PROJECT"
echo "Target Environment = $ENV"
echo "AWS Region = $aws_region"

# Check versions of required software #
######################################
aws --version
ecs-cli --version

# TODO: ls any other necessary files here, so the script fails early

# Get image produced via previous 'package_for_ecs' script #
############################################################
eval "$(grep '^IMAGE_REPO=' .env)"
echo "Image repository from .env is $IMAGE_REPO"
eval "$(grep '^IMAGE_LABEL=' .env)"
echo "Image label from .env is $IMAGE_LABEL"

# Upload image to ECR #
#######################
echo "Pushing image $IMAGE_REPO:$IMAGE_LABEL to ECR..."
ecs-cli push --aws-profile default $IMAGE_REPO:$IMAGE_LABEL
# TODO: should we even be tagging it "latest" yet?
#ecs-cli push --aws-profile default $IMAGE_REPO:latest

# Configure ecs-cli #
#####################
cluster_name=$(aws ssm get-parameter --region $aws_region --name "/$PROJECT/$ENV/cluster/id" --query "Parameter.Value" --out text)
echo "Configuring the default ECS cluster for ecs-cli to $cluster_name in region $aws_region..."
ecs-cli configure --cluster $cluster_name --region $aws_region --default-launch-type EC2

# Check state of service, and wait until new version becomes active #
#####################################################################
echo "Checking current state of service..."
(ecs-cli compose --aws-profile default service ps ||:) | tee service-status

# Remember: failed grep returns an error (1)

# States not in { RUNNING, STOPPED } include { PENDING }
state=OTHER

# If ANY are RUNNING, state is ACTIVE
if  [[ ! -s service-status ]] ; then  # status file doesn't exist or is empty:
    state=NONEXISTENT
elif  ( grep -q ServiceNotFoundException service-status ) ; then
    state=NONEXISTENT
elif ( grep -q RUNNING service-status ) ; then
    state=ACTIVE
elif  ( grep -q STOPPED service-status ) ; then
    state=INACTIVE
fi

echo "state is $state"

if [ "$state" == "OTHER" ] ; then
    echo "ERROR: unknown service state; see above.  Quitting...."
    exit 2
fi

if [ "$state" == "ACTIVE" ] ; then
   echo "Scaling service to 0 (because current state is $state)..."
   ecs-cli compose --aws-profile default service scale 0
fi

echo "Updating service..."
counter_limit=10
counter=$counter_limit
until ( ecs-cli compose --aws-profile default service up ) ; do
    counter=$((counter - 1))
    ecs-cli compose --aws-profile default service ps
    if (( counter <= 0 )); then
        echo "ERROR: Could not bring service up after $counter_limit attempts.  Quitting..."
        date
        exit 3
    fi
    sleep 5
done;

scale=2
echo "Scaling service to $scale containers..."
ecs-cli compose --aws-profile default service scale $scale

echo "Checking state of service..."
ecs-cli compose --aws-profile default service ps

# TODO: wait around until at least two things are RUNNING

echo duration: $(( $(date +%s) - $start_time )) seconds
date

# DONE #
########
