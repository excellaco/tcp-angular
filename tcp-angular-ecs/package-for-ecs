#!/bin/bash

# Create the Docker image for the tcp-angular service.
# All actions are local to the VM; does not use aws or ecs-cli.
# Should be run before deploy-to-ecs is run.

# Fail on any error; unset variables are errors; show commands before executing:
set -eux
PROJECT="$1"
ENV="$2"
# TODO: see if logging anything from this script would be helpful

# TODO: make sure we're in the correct (root) directory
# Can just check for Dockerfile, and cd .. if not there

date

echo "Running in $PWD"
echo "Project = $PROJECT"
echo "Target Environment = $ENV"

docker --version

aws_region=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed "s/[a-z]$//")

cluster_name=$(aws ssm get-parameter --region $aws_region --name "/$PROJECT/$ENV/cluster/id" --query "Parameter.Value" --out text)

# Find out what the external FQDN of the Application Load Balancer (ALB) is;
# change the domain line in ../src/environments/environment.prod.ts to
# use that instead of localhost; e.g.:
# const domain = 'tcp-testing-3-dev-cluster-alb-877192071.us-east-1.elb.amazonaws.com:8080'

alb=$(aws ssm get-parameter --region $aws_region --name "/$PROJECT/$ENV/alb/endpoint" --query "Parameter.Value" --out text)
echo "ALB FQDN is $alb"

# relative to project root:
envfile=src/environments/environment.ts
mv $envfile $envfile.orig
# The const domain setting can span multiple lines, so we have to do this song and dance:
touch $envfile
echo -e "// Generated by deploy-to-ecs $(date)\n" >> $envfile
# keep the part before BEGIN:
sed '/BEGIN DOMAIN DEF/,$d' $envfile.orig >> $envfile
# use the domain from SSM:
echo -e "const domain = '$alb:8080'" >> $envfile
# keep the part after END:
sed '0,/END DOMAIN DEF/d' $envfile.orig >> $envfile

echo "Original environment file:"
cat $envfile.orig

echo -e "\nModified environment file:"
cat $envfile

echo

echo "Building the Docker image...."
npm run docker:build

echo "Checking for the Docker image..."
docker image ls | grep tcp-angular

date
