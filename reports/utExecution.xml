<?xml version='1.0'?>
<testExecutions version='1'>
    <file path='src/app/messaging/services/dialog/dialog.service.spec.ts'>
        <testCase name='DialogService should be created' duration='278'/>
        <testCase name='DialogService confirm should call MatDialog.open()' duration='189'/>
        <testCase name='DialogService confirm should call accept() when accepted' duration='151'/>
        <testCase name='DialogService confirm should use a default title if one is not provided' duration='143'/>
        <testCase name='DialogService confirm should call accept() when accepted' duration='124'/>
        <testCase name='DialogService confirm should call MatDialog.open()' duration='87'/>
        <testCase name='DialogService confirm should use a default title if one is not provided' duration='85'/>
        <testCase name='DialogService confirm should call accept() when accepted' duration='90'/>
        <testCase name='DialogService confirm should call accept() when accepted' duration='86'/>
        <testCase name='DialogService should be created' duration='86'/>
        <testCase name='DialogService confirm should use a default title if one is not provided' duration='91'/>
        <testCase name='DialogService confirm should call MatDialog.open()' duration='97'/>
        <testCase name='DialogService confirm should call accept() when accepted' duration='86'/>
        <testCase name='DialogService confirm should call accept() when accepted' duration='82'/>
        <testCase name='DialogService should be created' duration='85'/>
        <testCase name='DialogService confirm should call accept() when accepted' duration='109'/>
        <testCase name='DialogService confirm should call MatDialog.open()' duration='98'/>
        <testCase name='DialogService confirm should use a default title if one is not provided' duration='101'/>
        <testCase name='DialogService confirm should call accept() when accepted' duration='99'/>
        <testCase name='DialogService should be created' duration='91'/>
        <testCase name='DialogService confirm should call MatDialog.open()' duration='91'/>
        <testCase name='DialogService confirm should use a default title if one is not provided' duration='90'/>
        <testCase name='DialogService confirm should call accept() when accepted' duration='84'/>
        <testCase name='DialogService confirm should call accept() when accepted' duration='79'/>
        <testCase name='DialogService should be created' duration='89'/>
    </file>
    <file path='src/app/admin/manage-categories/manage-categories.component.unit.spec.ts'>
        <testCase name='ManageCategories (Unit) #onEditCategory() should set categoryToEdit to the hydrated category' duration='1'/>
        <testCase name='ManageCategories (Unit) #onDeleteCategory() should require confirmation when Category has Skills' duration='1'/>
        <testCase name='ManageCategories (Unit) #onDeleteCategory() should call SkillCategoriesService.delete()' duration='0'/>
        <testCase name='ManageCategories (Unit) #onSubmitCategory() should null categoryToEdit to the form resets' duration='1'/>
        <testCase name='ManageCategories (Unit) #onSubmitCategory() should call SkillCategoriesService.addCategory()' duration='1'/>
        <testCase name='ManageCategories (Unit) #onEditCategory() should set categoryToEdit to the hydrated category' duration='1'/>
        <testCase name='ManageCategories (Unit) #onDeleteCategory() should require confirmation when Category has Skills' duration='0'/>
        <testCase name='ManageCategories (Unit) #onDeleteCategory() should call SkillCategoriesService.delete()' duration='0'/>
        <testCase name='ManageCategories (Unit) #onSubmitCategory() should call SkillCategoriesService.addCategory()' duration='1'/>
        <testCase name='ManageCategories (Unit) #onSubmitCategory() should null categoryToEdit to the form resets' duration='2'/>
        <testCase name='ManageCategories (Unit) #onSubmitCategory() should call SkillCategoriesService.addCategory()' duration='0'/>
        <testCase name='ManageCategories (Unit) #onSubmitCategory() should null categoryToEdit to the form resets' duration='0'/>
        <testCase name='ManageCategories (Unit) #onEditCategory() should set categoryToEdit to the hydrated category' duration='0'/>
        <testCase name='ManageCategories (Unit) #onDeleteCategory() should call SkillCategoriesService.delete()' duration='0'/>
        <testCase name='ManageCategories (Unit) #onDeleteCategory() should require confirmation when Category has Skills' duration='0'/>
        <testCase name='ManageCategories (Unit) #onEditCategory() should set categoryToEdit to the hydrated category' duration='1'/>
        <testCase name='ManageCategories (Unit) #onSubmitCategory() should call SkillCategoriesService.addCategory()' duration='0'/>
        <testCase name='ManageCategories (Unit) #onSubmitCategory() should null categoryToEdit to the form resets' duration='0'/>
        <testCase name='ManageCategories (Unit) #onDeleteCategory() should call SkillCategoriesService.delete()' duration='0'/>
        <testCase name='ManageCategories (Unit) #onDeleteCategory() should require confirmation when Category has Skills' duration='1'/>
        <testCase name='ManageCategories (Unit) #onEditCategory() should set categoryToEdit to the hydrated category' duration='1'/>
        <testCase name='ManageCategories (Unit) #onDeleteCategory() should call SkillCategoriesService.delete()' duration='0'/>
        <testCase name='ManageCategories (Unit) #onDeleteCategory() should require confirmation when Category has Skills' duration='0'/>
        <testCase name='ManageCategories (Unit) #onSubmitCategory() should call SkillCategoriesService.addCategory()' duration='1'/>
        <testCase name='ManageCategories (Unit) #onSubmitCategory() should null categoryToEdit to the form resets' duration='1'/>
    </file>
    <file path='src/app/home/home.component.spec.ts'>
        <testCase name='HomeComponent should create' duration='183'/>
        <testCase name='HomeComponent should create' duration='109'/>
        <testCase name='HomeComponent should create' duration='106'/>
        <testCase name='HomeComponent should create' duration='144'/>
        <testCase name='HomeComponent should create' duration='107'/>
    </file>
    <file path='src/app/employee/employee-list/list-controls/list-controls.component.spec.ts'>
        <testCase name='ListControlsComponent should create' duration='190'/>
        <testCase name='ListControlsComponent should emit on skillFilter$ when a skill is added' duration='160'/>
        <testCase name='ListControlsComponent should emit on nameFilter$ when a name is entered' duration='141'/>
        <testCase name='ListControlsComponent (Unit) #constructor() should create' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #constructor() should create' duration='0'/>
        <testCase name='ListControlsComponent should create' duration='121'/>
        <testCase name='ListControlsComponent should emit on skillFilter$ when a skill is added' duration='120'/>
        <testCase name='ListControlsComponent should emit on nameFilter$ when a name is entered' duration='124'/>
        <testCase name='ListControlsComponent should emit on skillFilter$ when a skill is added' duration='186'/>
        <testCase name='ListControlsComponent should emit on nameFilter$ when a name is entered' duration='188'/>
        <testCase name='ListControlsComponent should create' duration='174'/>
        <testCase name='ListControlsComponent (Unit) #constructor() should create' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #constructor() should create' duration='3'/>
        <testCase name='ListControlsComponent should emit on skillFilter$ when a skill is added' duration='122'/>
        <testCase name='ListControlsComponent should create' duration='110'/>
        <testCase name='ListControlsComponent should emit on nameFilter$ when a name is entered' duration='125'/>
        <testCase name='ListControlsComponent should create' duration='158'/>
        <testCase name='ListControlsComponent should emit on skillFilter$ when a skill is added' duration='157'/>
        <testCase name='ListControlsComponent should emit on nameFilter$ when a name is entered' duration='199'/>
        <testCase name='ListControlsComponent (Unit) #constructor() should create' duration='0'/>
    </file>
    <file path='src/app/home/home.component.unit.spec.ts'>
        <testCase name='HomeComponent (Unit) #skillCountByCategory() should return data in alphabetical order' duration='3'/>
        <testCase name='HomeComponent (Unit) #skillCountByCategory() should properly count skills based on category' duration='0'/>
        <testCase name='HomeComponent (Unit) #getCurrentUser() should utilize AuthService and EmployeeService to get the currently logged in user' duration='4'/>
        <testCase name='HomeComponent (Unit) #skillCountByProficiency() should properly count skills based on proficiency' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByProficiency() should return data in order, from High to Low' duration='0'/>
        <testCase name='HomeComponent (Unit) #getCurrentUser() should utilize AuthService and EmployeeService to get the currently logged in user' duration='4'/>
        <testCase name='HomeComponent (Unit) #skillCountByProficiency() should return data in order, from High to Low' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByProficiency() should properly count skills based on proficiency' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByCategory() should properly count skills based on category' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByCategory() should return data in alphabetical order' duration='1'/>
        <testCase name='HomeComponent (Unit) #getCurrentUser() should utilize AuthService and EmployeeService to get the currently logged in user' duration='2'/>
        <testCase name='HomeComponent (Unit) #skillCountByProficiency() should properly count skills based on proficiency' duration='1'/>
        <testCase name='HomeComponent (Unit) #skillCountByProficiency() should return data in order, from High to Low' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByCategory() should return data in alphabetical order' duration='1'/>
        <testCase name='HomeComponent (Unit) #skillCountByCategory() should properly count skills based on category' duration='0'/>
        <testCase name='HomeComponent (Unit) #getCurrentUser() should utilize AuthService and EmployeeService to get the currently logged in user' duration='2'/>
        <testCase name='HomeComponent (Unit) #skillCountByProficiency() should return data in order, from High to Low' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByProficiency() should properly count skills based on proficiency' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByCategory() should properly count skills based on category' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByCategory() should return data in alphabetical order' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByProficiency() should properly count skills based on proficiency' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByProficiency() should return data in order, from High to Low' duration='1'/>
        <testCase name='HomeComponent (Unit) #getCurrentUser() should utilize AuthService and EmployeeService to get the currently logged in user' duration='1'/>
        <testCase name='HomeComponent (Unit) #skillCountByCategory() should properly count skills based on category' duration='0'/>
        <testCase name='HomeComponent (Unit) #skillCountByCategory() should return data in alphabetical order' duration='2'/>
    </file>
    <file path='src/app/login/login.component.unit.spec.ts'>
        <testCase name='LoginComponent should build the formGroup via #buildForm()' duration='0'/>
        <testCase name='LoginComponent should call authservice login with correct info' duration='0'/>
        <testCase name='LoginComponent should create' duration='0'/>
        <testCase name='LoginComponent should build the formGroup via #buildForm()' duration='6'/>
        <testCase name='LoginComponent should call authservice login with correct info' duration='2'/>
        <testCase name='LoginComponent should create' duration='0'/>
        <testCase name='LoginComponent should call authservice login with correct info' duration='1'/>
        <testCase name='LoginComponent should build the formGroup via #buildForm()' duration='1'/>
        <testCase name='LoginComponent should create' duration='0'/>
        <testCase name='LoginComponent should build the formGroup via #buildForm()' duration='4'/>
        <testCase name='LoginComponent should create' duration='1'/>
        <testCase name='LoginComponent should call authservice login with correct info' duration='0'/>
        <testCase name='LoginComponent should create' duration='1'/>
        <testCase name='LoginComponent should call authservice login with correct info' duration='5'/>
        <testCase name='LoginComponent should build the formGroup via #buildForm()' duration='0'/>
    </file>
    <file path='src/app/messaging/services/snack-bar/snack-bar.service.spec.ts'>
        <testCase name='SnackBarService openSnackBar should just call MatSnackBar' duration='110'/>
        <testCase name='SnackBarService openSnackBar should take an optional action string' duration='99'/>
        <testCase name='SnackBarService should be created' duration='103'/>
        <testCase name='SnackBarService observerFor .next() should call openSnackBar with a success message' duration='110'/>
        <testCase name='SnackBarService observerFor .next() should call the passed in next fn' duration='98'/>
        <testCase name='SnackBarService observerFor .complete() should do nothing by default' duration='95'/>
        <testCase name='SnackBarService observerFor .complete() should call the passed in complete fn' duration='99'/>
        <testCase name='SnackBarService observerFor .error() should call openSnackBar with a fail message' duration='101'/>
        <testCase name='SnackBarService observerFor .error() should call the passed in error fn' duration='87'/>
        <testCase name='SnackBarService observerFor should work with only an action as input' duration='93'/>
        <testCase name='SnackBarService openSnackBar should take an optional action string' duration='110'/>
        <testCase name='SnackBarService openSnackBar should just call MatSnackBar' duration='113'/>
        <testCase name='SnackBarService should be created' duration='101'/>
        <testCase name='SnackBarService observerFor .next() should call the passed in next fn' duration='99'/>
        <testCase name='SnackBarService observerFor .next() should call openSnackBar with a success message' duration='100'/>
        <testCase name='SnackBarService observerFor .error() should call the passed in error fn' duration='96'/>
        <testCase name='SnackBarService observerFor .error() should call openSnackBar with a fail message' duration='98'/>
        <testCase name='SnackBarService observerFor .complete() should do nothing by default' duration='99'/>
        <testCase name='SnackBarService observerFor .complete() should call the passed in complete fn' duration='99'/>
        <testCase name='SnackBarService observerFor should work with only an action as input' duration='108'/>
        <testCase name='SnackBarService openSnackBar should take an optional action string' duration='116'/>
        <testCase name='SnackBarService openSnackBar should just call MatSnackBar' duration='98'/>
        <testCase name='SnackBarService observerFor .error() should call openSnackBar with a fail message' duration='91'/>
        <testCase name='SnackBarService observerFor .error() should call the passed in error fn' duration='93'/>
        <testCase name='SnackBarService observerFor .complete() should do nothing by default' duration='98'/>
        <testCase name='SnackBarService observerFor .complete() should call the passed in complete fn' duration='93'/>
        <testCase name='SnackBarService observerFor .next() should call openSnackBar with a success message' duration='97'/>
        <testCase name='SnackBarService observerFor .next() should call the passed in next fn' duration='100'/>
        <testCase name='SnackBarService observerFor should work with only an action as input' duration='96'/>
        <testCase name='SnackBarService should be created' duration='96'/>
        <testCase name='SnackBarService openSnackBar should take an optional action string' duration='267'/>
        <testCase name='SnackBarService openSnackBar should just call MatSnackBar' duration='215'/>
        <testCase name='SnackBarService observerFor .next() should call the passed in next fn' duration='173'/>
        <testCase name='SnackBarService observerFor .next() should call openSnackBar with a success message' duration='148'/>
        <testCase name='SnackBarService observerFor .error() should call openSnackBar with a fail message' duration='129'/>
        <testCase name='SnackBarService observerFor .error() should call the passed in error fn' duration='133'/>
        <testCase name='SnackBarService observerFor .complete() should call the passed in complete fn' duration='108'/>
        <testCase name='SnackBarService observerFor .complete() should do nothing by default' duration='111'/>
        <testCase name='SnackBarService observerFor should work with only an action as input' duration='109'/>
        <testCase name='SnackBarService should be created' duration='109'/>
        <testCase name='SnackBarService observerFor should work with only an action as input' duration='107'/>
        <testCase name='SnackBarService observerFor .error() should call the passed in error fn' duration='96'/>
        <testCase name='SnackBarService observerFor .error() should call openSnackBar with a fail message' duration='95'/>
        <testCase name='SnackBarService observerFor .next() should call the passed in next fn' duration='103'/>
        <testCase name='SnackBarService observerFor .next() should call openSnackBar with a success message' duration='111'/>
        <testCase name='SnackBarService observerFor .complete() should call the passed in complete fn' duration='107'/>
        <testCase name='SnackBarService observerFor .complete() should do nothing by default' duration='98'/>
        <testCase name='SnackBarService openSnackBar should take an optional action string' duration='90'/>
        <testCase name='SnackBarService openSnackBar should just call MatSnackBar' duration='92'/>
        <testCase name='SnackBarService should be created' duration='91'/>
    </file>
    <file path='src/app/admin/manage-categories/manage-categories.component.spec.ts'>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register add/update events from CategoryFormComponent' duration='0'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register edit events from CategoryListComponent' duration='155'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register delete events from CategoryListComponent' duration='158'/>
        <testCase name='ManageCategoriesComponent should create' duration='152'/>
        <testCase name='ManageCategoriesComponent should create' duration='127'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register edit events from CategoryListComponent' duration='129'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register delete events from CategoryListComponent' duration='125'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register add/update events from CategoryFormComponent' duration='0'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register add/update events from CategoryFormComponent' duration='0'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register edit events from CategoryListComponent' duration='399'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register delete events from CategoryListComponent' duration='270'/>
        <testCase name='ManageCategoriesComponent should create' duration='208'/>
        <testCase name='ManageCategoriesComponent should create' duration='127'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register edit events from CategoryListComponent' duration='132'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register delete events from CategoryListComponent' duration='129'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register add/update events from CategoryFormComponent' duration='0'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register add/update events from CategoryFormComponent' duration='0'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register delete events from CategoryListComponent' duration='135'/>
        <testCase name='ManageCategoriesComponent Child Event Bindings should register edit events from CategoryListComponent' duration='137'/>
        <testCase name='ManageCategoriesComponent should create' duration='134'/>
    </file>
    <file path='src/app/employee/employee-form/employee-form.component.spec.ts'>
        <testCase name='EmployeeFormComponent onSubmit should call the API to create the employee when not editing' duration='518'/>
        <testCase name='EmployeeFormComponent onSubmit should call the API to update the employee when editing' duration='486'/>
        <testCase name='EmployeeFormComponent should create' duration='419'/>
        <testCase name='EmployeeFormComponent should create' duration='491'/>
        <testCase name='EmployeeFormComponent onSubmit should call the API to create the employee when not editing' duration='509'/>
        <testCase name='EmployeeFormComponent onSubmit should call the API to update the employee when editing' duration='502'/>
        <testCase name='EmployeeFormComponent onSubmit should call the API to create the employee when not editing' duration='459'/>
        <testCase name='EmployeeFormComponent onSubmit should call the API to update the employee when editing' duration='453'/>
        <testCase name='EmployeeFormComponent should create' duration='459'/>
        <testCase name='EmployeeFormComponent should create' duration='537'/>
        <testCase name='EmployeeFormComponent onSubmit should call the API to update the employee when editing' duration='464'/>
        <testCase name='EmployeeFormComponent onSubmit should call the API to create the employee when not editing' duration='432'/>
        <testCase name='EmployeeFormComponent should create' duration='945'/>
        <testCase name='EmployeeFormComponent onSubmit should call the API to update the employee when editing' duration='661'/>
        <testCase name='EmployeeFormComponent onSubmit should call the API to create the employee when not editing' duration='603'/>
    </file>
    <file path='src/app/admin/manage-skills/manage-skills.component.spec.ts'>
        <testCase name='ManageSkillsComponent onDeleteSkill() should call skillService.delete()' duration='140'/>
        <testCase name='ManageSkillsComponent onDeleteSkill() should use an observer' duration='141'/>
        <testCase name='ManageSkillsComponent onAddSkill() should clear the skillToEdit' duration='132'/>
        <testCase name='ManageSkillsComponent onAddSkill() should call skillService.update() when the skill has an id already' duration='136'/>
        <testCase name='ManageSkillsComponent onAddSkill() should use an observer with &apos;Update Skill&apos; when the skill has an id already' duration='142'/>
        <testCase name='ManageSkillsComponent onAddSkill() should use an observer with &apos;Create Skill&apos; when skill.id is null' duration='136'/>
        <testCase name='ManageSkillsComponent onAddSkill() should call skillService.create() when skill.id is null' duration='144'/>
        <testCase name='ManageSkillsComponent onEditSkill() should set the skillToEdit' duration='136'/>
        <testCase name='ManageSkillsComponent should create' duration='129'/>
        <testCase name='ManageSkillsComponent onEditSkill() should set the skillToEdit' duration='134'/>
        <testCase name='ManageSkillsComponent should create' duration='140'/>
        <testCase name='ManageSkillsComponent onAddSkill() should use an observer with &apos;Create Skill&apos; when skill.id is null' duration='146'/>
        <testCase name='ManageSkillsComponent onAddSkill() should call skillService.create() when skill.id is null' duration='147'/>
        <testCase name='ManageSkillsComponent onAddSkill() should use an observer with &apos;Update Skill&apos; when the skill has an id already' duration='145'/>
        <testCase name='ManageSkillsComponent onAddSkill() should clear the skillToEdit' duration='139'/>
        <testCase name='ManageSkillsComponent onAddSkill() should call skillService.update() when the skill has an id already' duration='139'/>
        <testCase name='ManageSkillsComponent onDeleteSkill() should use an observer' duration='147'/>
        <testCase name='ManageSkillsComponent onDeleteSkill() should call skillService.delete()' duration='139'/>
        <testCase name='ManageSkillsComponent onEditSkill() should set the skillToEdit' duration='192'/>
        <testCase name='ManageSkillsComponent should create' duration='187'/>
        <testCase name='ManageSkillsComponent onDeleteSkill() should call skillService.delete()' duration='175'/>
        <testCase name='ManageSkillsComponent onDeleteSkill() should use an observer' duration='183'/>
        <testCase name='ManageSkillsComponent onAddSkill() should call skillService.update() when the skill has an id already' duration='192'/>
        <testCase name='ManageSkillsComponent onAddSkill() should use an observer with &apos;Create Skill&apos; when skill.id is null' duration='172'/>
        <testCase name='ManageSkillsComponent onAddSkill() should clear the skillToEdit' duration='153'/>
        <testCase name='ManageSkillsComponent onAddSkill() should call skillService.create() when skill.id is null' duration='153'/>
        <testCase name='ManageSkillsComponent onAddSkill() should use an observer with &apos;Update Skill&apos; when the skill has an id already' duration='174'/>
        <testCase name='ManageSkillsComponent onDeleteSkill() should call skillService.delete()' duration='156'/>
        <testCase name='ManageSkillsComponent onDeleteSkill() should use an observer' duration='164'/>
        <testCase name='ManageSkillsComponent should create' duration='132'/>
        <testCase name='ManageSkillsComponent onAddSkill() should clear the skillToEdit' duration='142'/>
        <testCase name='ManageSkillsComponent onAddSkill() should call skillService.update() when the skill has an id already' duration='147'/>
        <testCase name='ManageSkillsComponent onAddSkill() should use an observer with &apos;Update Skill&apos; when the skill has an id already' duration='144'/>
        <testCase name='ManageSkillsComponent onAddSkill() should call skillService.create() when skill.id is null' duration='144'/>
        <testCase name='ManageSkillsComponent onAddSkill() should use an observer with &apos;Create Skill&apos; when skill.id is null' duration='141'/>
        <testCase name='ManageSkillsComponent onEditSkill() should set the skillToEdit' duration='144'/>
        <testCase name='ManageSkillsComponent onAddSkill() should call skillService.update() when the skill has an id already' duration='137'/>
        <testCase name='ManageSkillsComponent onAddSkill() should use an observer with &apos;Update Skill&apos; when the skill has an id already' duration='150'/>
        <testCase name='ManageSkillsComponent onAddSkill() should clear the skillToEdit' duration='139'/>
        <testCase name='ManageSkillsComponent onAddSkill() should use an observer with &apos;Create Skill&apos; when skill.id is null' duration='164'/>
        <testCase name='ManageSkillsComponent onAddSkill() should call skillService.create() when skill.id is null' duration='139'/>
        <testCase name='ManageSkillsComponent onDeleteSkill() should use an observer' duration='156'/>
        <testCase name='ManageSkillsComponent onDeleteSkill() should call skillService.delete()' duration='136'/>
        <testCase name='ManageSkillsComponent onEditSkill() should set the skillToEdit' duration='131'/>
        <testCase name='ManageSkillsComponent should create' duration='130'/>
    </file>
    <file path='src/app/admin/manage-skills/skill-list/skill-list.component.spec.ts'>
        <testCase name='SkillListComponent should create' duration='103'/>
        <testCase name='SkillListComponent should create' duration='123'/>
        <testCase name='SkillListComponent should create' duration='111'/>
        <testCase name='SkillListComponent should create' duration='153'/>
        <testCase name='SkillListComponent should create' duration='158'/>
    </file>
    <file path='src/app/employee/employee-form/review/review.component.spec.ts'>
        <testCase name='ReviewComponent should create' duration='14'/>
        <testCase name='ReviewComponent should create' duration='19'/>
        <testCase name='ReviewComponent should create' duration='13'/>
        <testCase name='ReviewComponent should create' duration='13'/>
        <testCase name='ReviewComponent should create' duration='18'/>
    </file>
    <file path='src/app/services/skill-categories/skill-categories.service.spec.ts'>
        <testCase name='SkillCategoriesService should be created' duration='91'/>
        <testCase name='SkillCategoriesService should be created' duration='102'/>
        <testCase name='SkillCategoriesService should be created' duration='96'/>
        <testCase name='SkillCategoriesService should be created' duration='98'/>
        <testCase name='SkillCategoriesService should be created' duration='89'/>
    </file>
    <file path='src/app/utils/date.validators.unit.spec.ts'>
        <testCase name='DateValidators ofAge should reject invalid dates like validDate' duration='1'/>
        <testCase name='DateValidators ofAge should return null if birthday was yesterday' duration='2'/>
        <testCase name='DateValidators ofAge should support overloading with a custom age' duration='1'/>
        <testCase name='DateValidators ofAge should return null if today is 18th birthday' duration='0'/>
        <testCase name='DateValidators ofAge should reject if 18th birthday is tomorrow' duration='0'/>
        <testCase name='DateValidators validDate should be invalid when not a legal month' duration='1'/>
        <testCase name='DateValidators validDate should accept today as valid' duration='0'/>
        <testCase name='DateValidators ofAge should reject invalid dates like validDate' duration='0'/>
        <testCase name='DateValidators ofAge should return null if today is 18th birthday' duration='3'/>
        <testCase name='DateValidators ofAge should reject if 18th birthday is tomorrow' duration='0'/>
        <testCase name='DateValidators ofAge should return null if birthday was yesterday' duration='0'/>
        <testCase name='DateValidators ofAge should support overloading with a custom age' duration='0'/>
        <testCase name='DateValidators validDate should accept today as valid' duration='0'/>
        <testCase name='DateValidators validDate should be invalid when not a legal month' duration='1'/>
        <testCase name='DateValidators validDate should accept today as valid' duration='2'/>
        <testCase name='DateValidators validDate should be invalid when not a legal month' duration='0'/>
        <testCase name='DateValidators ofAge should reject invalid dates like validDate' duration='0'/>
        <testCase name='DateValidators ofAge should return null if birthday was yesterday' duration='3'/>
        <testCase name='DateValidators ofAge should support overloading with a custom age' duration='1'/>
        <testCase name='DateValidators ofAge should return null if today is 18th birthday' duration='0'/>
        <testCase name='DateValidators ofAge should reject if 18th birthday is tomorrow' duration='0'/>
        <testCase name='DateValidators validDate should be invalid when not a legal month' duration='2'/>
        <testCase name='DateValidators validDate should accept today as valid' duration='0'/>
        <testCase name='DateValidators ofAge should reject invalid dates like validDate' duration='0'/>
        <testCase name='DateValidators ofAge should return null if birthday was yesterday' duration='2'/>
        <testCase name='DateValidators ofAge should reject if 18th birthday is tomorrow' duration='2'/>
        <testCase name='DateValidators ofAge should return null if today is 18th birthday' duration='1'/>
        <testCase name='DateValidators ofAge should support overloading with a custom age' duration='0'/>
        <testCase name='DateValidators validDate should accept today as valid' duration='2'/>
        <testCase name='DateValidators validDate should be invalid when not a legal month' duration='0'/>
        <testCase name='DateValidators ofAge should reject if 18th birthday is tomorrow' duration='1'/>
        <testCase name='DateValidators ofAge should support overloading with a custom age' duration='1'/>
        <testCase name='DateValidators ofAge should return null if birthday was yesterday' duration='0'/>
        <testCase name='DateValidators ofAge should return null if today is 18th birthday' duration='1'/>
        <testCase name='DateValidators ofAge should reject invalid dates like validDate' duration='0'/>
    </file>
    <file path='src/app/employee/employee-form/skills-form/skill-detail/skill-detail.component.spec.ts'>
        <testCase name='SkillDetailComponent Primary Skill Management should uncheck primary when event is not this index' duration='106'/>
        <testCase name='SkillDetailComponent Primary Skill Management should set the primary index when set from F -> T' duration='111'/>
        <testCase name='SkillDetailComponent Primary Skill Management should not set the primary index when set from T -> F' duration='108'/>
        <testCase name='SkillDetailComponent Primary Skill Management should reassert the index when the index changes and is set to primary' duration='0'/>
        <testCase name='SkillDetailComponent Primary Skill Management should check primary when event is this index' duration='111'/>
        <testCase name='SkillDetailComponent should create' duration='98'/>
        <testCase name='SkillDetailComponent should create' duration='119'/>
        <testCase name='SkillDetailComponent Primary Skill Management should not set the primary index when set from T -> F' duration='112'/>
        <testCase name='SkillDetailComponent Primary Skill Management should reassert the index when the index changes and is set to primary' duration='0'/>
        <testCase name='SkillDetailComponent Primary Skill Management should set the primary index when set from F -> T' duration='116'/>
        <testCase name='SkillDetailComponent Primary Skill Management should check primary when event is this index' duration='119'/>
        <testCase name='SkillDetailComponent Primary Skill Management should uncheck primary when event is not this index' duration='112'/>
        <testCase name='SkillDetailComponent Primary Skill Management should set the primary index when set from F -> T' duration='139'/>
        <testCase name='SkillDetailComponent Primary Skill Management should reassert the index when the index changes and is set to primary' duration='0'/>
        <testCase name='SkillDetailComponent Primary Skill Management should uncheck primary when event is not this index' duration='133'/>
        <testCase name='SkillDetailComponent Primary Skill Management should not set the primary index when set from T -> F' duration='118'/>
        <testCase name='SkillDetailComponent Primary Skill Management should check primary when event is this index' duration='116'/>
        <testCase name='SkillDetailComponent should create' duration='110'/>
        <testCase name='SkillDetailComponent should create' duration='109'/>
        <testCase name='SkillDetailComponent Primary Skill Management should uncheck primary when event is not this index' duration='111'/>
        <testCase name='SkillDetailComponent Primary Skill Management should not set the primary index when set from T -> F' duration='109'/>
        <testCase name='SkillDetailComponent Primary Skill Management should check primary when event is this index' duration='114'/>
        <testCase name='SkillDetailComponent Primary Skill Management should set the primary index when set from F -> T' duration='118'/>
        <testCase name='SkillDetailComponent Primary Skill Management should reassert the index when the index changes and is set to primary' duration='0'/>
        <testCase name='SkillDetailComponent Primary Skill Management should uncheck primary when event is not this index' duration='120'/>
        <testCase name='SkillDetailComponent Primary Skill Management should check primary when event is this index' duration='111'/>
        <testCase name='SkillDetailComponent Primary Skill Management should not set the primary index when set from T -> F' duration='124'/>
        <testCase name='SkillDetailComponent Primary Skill Management should set the primary index when set from F -> T' duration='129'/>
        <testCase name='SkillDetailComponent Primary Skill Management should reassert the index when the index changes and is set to primary' duration='0'/>
        <testCase name='SkillDetailComponent should create' duration='124'/>
    </file>
    <file path='src/app/services/skills/skills.service.spec.ts'>
        <testCase name='SkillsService should be created' duration='84'/>
        <testCase name='SkillsService should be created' duration='87'/>
        <testCase name='SkillsService should be created' duration='91'/>
        <testCase name='SkillsService should be created' duration='103'/>
        <testCase name='SkillsService should be created' duration='86'/>
    </file>
    <file path='src/app/services/auth/auth.service.unit.spec.ts'>
        <testCase name='AuthService (Unit) getEmail() should return email' duration='1'/>
        <testCase name='AuthService (Unit) getRoles() should return roles' duration='0'/>
        <testCase name='AuthService (Unit) isLoggedIn() should return false if not logged in' duration='0'/>
        <testCase name='AuthService (Unit) isLoggedIn() should return true if logged in' duration='0'/>
        <testCase name='AuthService (Unit) logout() should clear localstorage' duration='0'/>
        <testCase name='AuthService (Unit) logout() should navigate to te login page' duration='0'/>
        <testCase name='AuthService (Unit) getToken() decoded should return decoded token' duration='2'/>
        <testCase name='AuthService (Unit) getToken() should return token' duration='1'/>
        <testCase name='AuthService (Unit) getToken() should not return token when expired' duration='0'/>
        <testCase name='AuthService (Unit) isAdmin() should return false if user is not admin' duration='1'/>
        <testCase name='AuthService (Unit) isAdmin() should return true if user is admin' duration='0'/>
        <testCase name='AuthService (Unit) getRoles() should return roles' duration='0'/>
        <testCase name='AuthService (Unit) getEmail() should return email' duration='1'/>
        <testCase name='AuthService (Unit) getToken() should not return token when expired' duration='0'/>
        <testCase name='AuthService (Unit) getToken() decoded should return decoded token' duration='1'/>
        <testCase name='AuthService (Unit) getToken() should return token' duration='0'/>
        <testCase name='AuthService (Unit) isLoggedIn() should return false if not logged in' duration='0'/>
        <testCase name='AuthService (Unit) isLoggedIn() should return true if logged in' duration='0'/>
        <testCase name='AuthService (Unit) logout() should navigate to te login page' duration='1'/>
        <testCase name='AuthService (Unit) logout() should clear localstorage' duration='0'/>
        <testCase name='AuthService (Unit) isAdmin() should return false if user is not admin' duration='0'/>
        <testCase name='AuthService (Unit) isAdmin() should return true if user is admin' duration='0'/>
        <testCase name='AuthService (Unit) isAdmin() should return false if user is not admin' duration='6'/>
        <testCase name='AuthService (Unit) isAdmin() should return true if user is admin' duration='1'/>
        <testCase name='AuthService (Unit) getRoles() should return roles' duration='0'/>
        <testCase name='AuthService (Unit) logout() should navigate to te login page' duration='1'/>
        <testCase name='AuthService (Unit) logout() should clear localstorage' duration='0'/>
        <testCase name='AuthService (Unit) getEmail() should return email' duration='1'/>
        <testCase name='AuthService (Unit) getToken() should return token' duration='1'/>
        <testCase name='AuthService (Unit) getToken() decoded should return decoded token' duration='0'/>
        <testCase name='AuthService (Unit) getToken() should not return token when expired' duration='0'/>
        <testCase name='AuthService (Unit) isLoggedIn() should return true if logged in' duration='0'/>
        <testCase name='AuthService (Unit) isLoggedIn() should return false if not logged in' duration='0'/>
        <testCase name='AuthService (Unit) isAdmin() should return false if user is not admin' duration='2'/>
        <testCase name='AuthService (Unit) isAdmin() should return true if user is admin' duration='1'/>
        <testCase name='AuthService (Unit) getToken() decoded should return decoded token' duration='1'/>
        <testCase name='AuthService (Unit) getToken() should not return token when expired' duration='0'/>
        <testCase name='AuthService (Unit) getToken() should return token' duration='0'/>
        <testCase name='AuthService (Unit) getEmail() should return email' duration='0'/>
        <testCase name='AuthService (Unit) logout() should clear localstorage' duration='0'/>
        <testCase name='AuthService (Unit) logout() should navigate to te login page' duration='0'/>
        <testCase name='AuthService (Unit) getRoles() should return roles' duration='0'/>
        <testCase name='AuthService (Unit) isLoggedIn() should return true if logged in' duration='0'/>
        <testCase name='AuthService (Unit) isLoggedIn() should return false if not logged in' duration='0'/>
        <testCase name='AuthService (Unit) getRoles() should return roles' duration='0'/>
        <testCase name='AuthService (Unit) isLoggedIn() should return true if logged in' duration='5'/>
        <testCase name='AuthService (Unit) isLoggedIn() should return false if not logged in' duration='0'/>
        <testCase name='AuthService (Unit) isAdmin() should return true if user is admin' duration='0'/>
        <testCase name='AuthService (Unit) isAdmin() should return false if user is not admin' duration='1'/>
        <testCase name='AuthService (Unit) logout() should clear localstorage' duration='1'/>
        <testCase name='AuthService (Unit) logout() should navigate to te login page' duration='0'/>
        <testCase name='AuthService (Unit) getToken() should not return token when expired' duration='0'/>
        <testCase name='AuthService (Unit) getToken() should return token' duration='0'/>
        <testCase name='AuthService (Unit) getToken() decoded should return decoded token' duration='1'/>
        <testCase name='AuthService (Unit) getEmail() should return email' duration='1'/>
    </file>
    <file path='src/app/services/auth/auth.service.integration.spec.ts'>
        <testCase name='AuthService (Unit) should be created' duration='0'/>
        <testCase name='AuthService login should not localStorageKey when unsuccessful' duration='6'/>
        <testCase name='AuthService login should set localStorageKey when successful' duration='6'/>
        <testCase name='AuthService login should POST username &amp; password in url-encoded body with Basic auth' duration='9'/>
        <testCase name='AuthService login should route to home when successful' duration='5'/>
        <testCase name='AuthService should be created' duration='5'/>
        <testCase name='AuthService (Unit) should be created' duration='0'/>
        <testCase name='AuthService should be created' duration='7'/>
        <testCase name='AuthService login should POST username &amp; password in url-encoded body with Basic auth' duration='6'/>
        <testCase name='AuthService login should not localStorageKey when unsuccessful' duration='5'/>
        <testCase name='AuthService login should route to home when successful' duration='6'/>
        <testCase name='AuthService login should set localStorageKey when successful' duration='5'/>
        <testCase name='AuthService (Unit) should be created' duration='1'/>
        <testCase name='AuthService should be created' duration='6'/>
        <testCase name='AuthService login should POST username &amp; password in url-encoded body with Basic auth' duration='6'/>
        <testCase name='AuthService login should route to home when successful' duration='5'/>
        <testCase name='AuthService login should set localStorageKey when successful' duration='4'/>
        <testCase name='AuthService login should not localStorageKey when unsuccessful' duration='6'/>
        <testCase name='AuthService should be created' duration='11'/>
        <testCase name='AuthService login should route to home when successful' duration='6'/>
        <testCase name='AuthService login should POST username &amp; password in url-encoded body with Basic auth' duration='6'/>
        <testCase name='AuthService login should not localStorageKey when unsuccessful' duration='9'/>
        <testCase name='AuthService login should set localStorageKey when successful' duration='7'/>
        <testCase name='AuthService (Unit) should be created' duration='0'/>
        <testCase name='AuthService login should POST username &amp; password in url-encoded body with Basic auth' duration='10'/>
        <testCase name='AuthService login should route to home when successful' duration='12'/>
        <testCase name='AuthService login should not localStorageKey when unsuccessful' duration='8'/>
        <testCase name='AuthService login should set localStorageKey when successful' duration='6'/>
        <testCase name='AuthService should be created' duration='8'/>
        <testCase name='AuthService (Unit) should be created' duration='0'/>
    </file>
    <file path='src/app/admin/manage-categories/category-form/category-form.component.spec.ts'>
        <testCase name='CategoryFormComponent Submit button should be disabled when the formGroup is invalid' duration='93'/>
        <testCase name='CategoryFormComponent Submit button should be enabled when the formGroup is valid' duration='96'/>
        <testCase name='CategoryFormComponent Submit button should call onSubmit() when clicked' duration='96'/>
        <testCase name='CategoryFormComponent Submit button should be labeled "Update Category" when not editing' duration='91'/>
        <testCase name='CategoryFormComponent Submit button should be labeled "Add Category" when not editing' duration='94'/>
        <testCase name='CategoryFormComponent should create' duration='91'/>
        <testCase name='CategoryFormComponent Name field should display the required error message' duration='102'/>
        <testCase name='CategoryFormComponent Name field should display the required error message' duration='97'/>
        <testCase name='CategoryFormComponent Name field should display the required error message' duration='353'/>
        <testCase name='CategoryFormComponent Name field should display the required error message' duration='216'/>
        <testCase name='CategoryFormComponent Submit button should be disabled when the formGroup is invalid' duration='182'/>
        <testCase name='CategoryFormComponent Submit button should be labeled "Update Category" when not editing' duration='170'/>
        <testCase name='CategoryFormComponent Submit button should be labeled "Add Category" when not editing' duration='153'/>
        <testCase name='CategoryFormComponent Submit button should call onSubmit() when clicked' duration='159'/>
        <testCase name='CategoryFormComponent Submit button should be enabled when the formGroup is valid' duration='135'/>
        <testCase name='CategoryFormComponent should create' duration='128'/>
        <testCase name='CategoryFormComponent should create' duration='111'/>
        <testCase name='CategoryFormComponent Name field should display the required error message' duration='111'/>
        <testCase name='CategoryFormComponent Name field should display the required error message' duration='112'/>
        <testCase name='CategoryFormComponent Submit button should be labeled "Update Category" when not editing' duration='116'/>
        <testCase name='CategoryFormComponent Submit button should be disabled when the formGroup is invalid' duration='119'/>
        <testCase name='CategoryFormComponent Submit button should be enabled when the formGroup is valid' duration='183'/>
        <testCase name='CategoryFormComponent Submit button should call onSubmit() when clicked' duration='113'/>
        <testCase name='CategoryFormComponent Submit button should be labeled "Add Category" when not editing' duration='103'/>
        <testCase name='CategoryFormComponent should create' duration='100'/>
        <testCase name='CategoryFormComponent Submit button should be enabled when the formGroup is valid' duration='97'/>
        <testCase name='CategoryFormComponent Submit button should call onSubmit() when clicked' duration='102'/>
        <testCase name='CategoryFormComponent Submit button should be disabled when the formGroup is invalid' duration='100'/>
        <testCase name='CategoryFormComponent Submit button should be labeled "Add Category" when not editing' duration='97'/>
        <testCase name='CategoryFormComponent Submit button should be labeled "Update Category" when not editing' duration='104'/>
        <testCase name='CategoryFormComponent Name field should display the required error message' duration='101'/>
        <testCase name='CategoryFormComponent Name field should display the required error message' duration='131'/>
        <testCase name='CategoryFormComponent should create' duration='111'/>
        <testCase name='CategoryFormComponent Submit button should be labeled "Add Category" when not editing' duration='110'/>
        <testCase name='CategoryFormComponent Submit button should call onSubmit() when clicked' duration='115'/>
        <testCase name='CategoryFormComponent Submit button should be labeled "Update Category" when not editing' duration='106'/>
        <testCase name='CategoryFormComponent Submit button should be disabled when the formGroup is invalid' duration='98'/>
        <testCase name='CategoryFormComponent Submit button should be enabled when the formGroup is valid' duration='98'/>
        <testCase name='CategoryFormComponent Name field should display the required error message' duration='103'/>
        <testCase name='CategoryFormComponent Name field should display the required error message' duration='102'/>
    </file>
    <file path='src/app/employee/services/state/state.service.spec.ts'>
        <testCase name='StateService should be created' duration='4'/>
        <testCase name='StateService should be created' duration='4'/>
        <testCase name='StateService should be created' duration='4'/>
        <testCase name='StateService should be created' duration='5'/>
        <testCase name='StateService should be created' duration='7'/>
    </file>
    <file path='src/app/main-nav/main-nav.component.spec.ts'>
        <testCase name='Main Nav Rendering should display the logout link when not logged in' duration='185'/>
        <testCase name='Main Nav Rendering should display the right links for Users' duration='176'/>
        <testCase name='Main Nav Rendering should display the login link when not logged in' duration='182'/>
        <testCase name='Main Nav Rendering should display the right links for Admin' duration='179'/>
        <testCase name='MainNavComponent should compile' duration='94'/>
        <testCase name='MainNavComponent logout() should call authService.logout()' duration='103'/>
        <testCase name='MainNavComponent getCurrentUser() should call employeeService.getByEmail()' duration='96'/>
        <testCase name='MainNavComponent isLoggedIn() should refer to authService.isLoggedIn()' duration='96'/>
        <testCase name='MainNavComponent currentUserIsAdmin() should refer to authService.isAdmin()' duration='101'/>
        <testCase name='MainNavComponent logout() should call authService.logout()' duration='121'/>
        <testCase name='MainNavComponent isLoggedIn() should refer to authService.isLoggedIn()' duration='123'/>
        <testCase name='MainNavComponent should compile' duration='116'/>
        <testCase name='MainNavComponent currentUserIsAdmin() should refer to authService.isAdmin()' duration='102'/>
        <testCase name='Main Nav Rendering should display the right links for Admin' duration='202'/>
        <testCase name='Main Nav Rendering should display the login link when not logged in' duration='195'/>
        <testCase name='Main Nav Rendering should display the logout link when not logged in' duration='195'/>
        <testCase name='Main Nav Rendering should display the right links for Users' duration='194'/>
        <testCase name='MainNavComponent should compile' duration='106'/>
        <testCase name='MainNavComponent logout() should call authService.logout()' duration='103'/>
        <testCase name='MainNavComponent currentUserIsAdmin() should refer to authService.isAdmin()' duration='96'/>
        <testCase name='MainNavComponent isLoggedIn() should refer to authService.isLoggedIn()' duration='101'/>
        <testCase name='Main Nav Rendering should display the login link when not logged in' duration='186'/>
        <testCase name='Main Nav Rendering should display the logout link when not logged in' duration='181'/>
        <testCase name='Main Nav Rendering should display the right links for Admin' duration='188'/>
        <testCase name='Main Nav Rendering should display the right links for Users' duration='183'/>
        <testCase name='Main Nav Rendering should display the right links for Users' duration='209'/>
        <testCase name='Main Nav Rendering should display the right links for Admin' duration='206'/>
        <testCase name='Main Nav Rendering should display the login link when not logged in' duration='188'/>
        <testCase name='Main Nav Rendering should display the logout link when not logged in' duration='206'/>
        <testCase name='MainNavComponent currentUserIsAdmin() should refer to authService.isAdmin()' duration='104'/>
        <testCase name='MainNavComponent logout() should call authService.logout()' duration='104'/>
        <testCase name='MainNavComponent should compile' duration='114'/>
        <testCase name='MainNavComponent isLoggedIn() should refer to authService.isLoggedIn()' duration='112'/>
        <testCase name='MainNavComponent should compile' duration='104'/>
        <testCase name='MainNavComponent logout() should call authService.logout()' duration='112'/>
        <testCase name='MainNavComponent currentUserIsAdmin() should refer to authService.isAdmin()' duration='114'/>
        <testCase name='MainNavComponent isLoggedIn() should refer to authService.isLoggedIn()' duration='97'/>
        <testCase name='Main Nav Rendering should display the right links for Admin' duration='184'/>
        <testCase name='Main Nav Rendering should display the login link when not logged in' duration='177'/>
        <testCase name='Main Nav Rendering should display the logout link when not logged in' duration='178'/>
        <testCase name='Main Nav Rendering should display the right links for Users' duration='175'/>
    </file>
    <file path='src/app/admin/manage-skills/skill-form/skill-form.component.spec.ts'>
        <testCase name='SkillFormComponent onSubmit() should emit the new skill' duration='192'/>
        <testCase name='SkillFormComponent onSubmit() should emit the updated skill' duration='218'/>
        <testCase name='SkillFormComponent should create' duration='189'/>
        <testCase name='SkillFormComponent ngOnChanges should reset the formGroup when the new skill is null' duration='257'/>
        <testCase name='SkillFormComponent ngOnChanges should populate the formGroup with the new skill' duration='189'/>
        <testCase name='SkillFormComponent ngOnChanges should do nothing on initial load' duration='188'/>
        <testCase name='SkillFormComponent ngOnChanges should do nothing if there is not a change in the skill' duration='184'/>
        <testCase name='SkillFormComponent should create' duration='212'/>
        <testCase name='SkillFormComponent ngOnChanges should reset the formGroup when the new skill is null' duration='209'/>
        <testCase name='SkillFormComponent ngOnChanges should populate the formGroup with the new skill' duration='210'/>
        <testCase name='SkillFormComponent ngOnChanges should do nothing on initial load' duration='203'/>
        <testCase name='SkillFormComponent ngOnChanges should do nothing if there is not a change in the skill' duration='205'/>
        <testCase name='SkillFormComponent onSubmit() should emit the updated skill' duration='212'/>
        <testCase name='SkillFormComponent onSubmit() should emit the new skill' duration='234'/>
        <testCase name='SkillFormComponent should create' duration='232'/>
        <testCase name='SkillFormComponent onSubmit() should emit the new skill' duration='215'/>
        <testCase name='SkillFormComponent onSubmit() should emit the updated skill' duration='219'/>
        <testCase name='SkillFormComponent ngOnChanges should do nothing on initial load' duration='205'/>
        <testCase name='SkillFormComponent ngOnChanges should do nothing if there is not a change in the skill' duration='211'/>
        <testCase name='SkillFormComponent ngOnChanges should reset the formGroup when the new skill is null' duration='205'/>
        <testCase name='SkillFormComponent ngOnChanges should populate the formGroup with the new skill' duration='199'/>
        <testCase name='SkillFormComponent onSubmit() should emit the updated skill' duration='212'/>
        <testCase name='SkillFormComponent onSubmit() should emit the new skill' duration='207'/>
        <testCase name='SkillFormComponent ngOnChanges should reset the formGroup when the new skill is null' duration='192'/>
        <testCase name='SkillFormComponent ngOnChanges should do nothing on initial load' duration='267'/>
        <testCase name='SkillFormComponent ngOnChanges should populate the formGroup with the new skill' duration='197'/>
        <testCase name='SkillFormComponent ngOnChanges should do nothing if there is not a change in the skill' duration='195'/>
        <testCase name='SkillFormComponent should create' duration='213'/>
        <testCase name='SkillFormComponent onSubmit() should emit the updated skill' duration='240'/>
        <testCase name='SkillFormComponent onSubmit() should emit the new skill' duration='230'/>
        <testCase name='SkillFormComponent ngOnChanges should do nothing if there is not a change in the skill' duration='215'/>
        <testCase name='SkillFormComponent ngOnChanges should do nothing on initial load' duration='220'/>
        <testCase name='SkillFormComponent ngOnChanges should reset the formGroup when the new skill is null' duration='219'/>
        <testCase name='SkillFormComponent ngOnChanges should populate the formGroup with the new skill' duration='253'/>
        <testCase name='SkillFormComponent should create' duration='218'/>
    </file>
    <file path='src/app/app.component.spec.ts'>
        <testCase name='AppComponent should create the app' duration='93'/>
        <testCase name='AppComponent should create the app' duration='106'/>
        <testCase name='AppComponent should create the app' duration='115'/>
        <testCase name='AppComponent should create the app' duration='136'/>
        <testCase name='AppComponent should create the app' duration='143'/>
    </file>
    <file path='src/app/employee/self-service/self-service.component.spec.ts'>
        <testCase name='SelfServiceComponent should create' duration='240'/>
        <testCase name='SelfServiceComponent should create' duration='219'/>
        <testCase name='SelfServiceComponent should create' duration='228'/>
        <testCase name='SelfServiceComponent should create' duration='214'/>
        <testCase name='SelfServiceComponent should create' duration='220'/>
    </file>
    <file path='src/app/pipes/required-message/required-message.pipe.spec.ts'>
        <testCase name='RequiredMessagePipe create an instance' duration='5'/>
        <testCase name='RequiredMessagePipe #transform() should produce a formatted message' duration='0'/>
        <testCase name='RequiredMessagePipe #transform() should produce a formatted message' duration='2'/>
        <testCase name='RequiredMessagePipe create an instance' duration='4'/>
        <testCase name='RequiredMessagePipe create an instance' duration='1'/>
        <testCase name='RequiredMessagePipe #transform() should produce a formatted message' duration='0'/>
        <testCase name='RequiredMessagePipe create an instance' duration='1'/>
        <testCase name='RequiredMessagePipe #transform() should produce a formatted message' duration='0'/>
        <testCase name='RequiredMessagePipe #transform() should produce a formatted message' duration='6'/>
        <testCase name='RequiredMessagePipe create an instance' duration='0'/>
    </file>
    <file path='src/app/employee/services/primary-skill/primary-skill.service.spec.ts'>
        <testCase name='PrimarySkillService should be created' duration='4'/>
        <testCase name='PrimarySkillService should be created' duration='4'/>
        <testCase name='PrimarySkillService should be created' duration='4'/>
        <testCase name='PrimarySkillService should be created' duration='9'/>
        <testCase name='PrimarySkillService should be created' duration='5'/>
    </file>
    <file path='src/app/admin/manage-categories/category-form/category-form.unit.spec.ts'>
        <testCase name='CategoryFormComponent (Unit) constructor should build the formGroup via #buildForm()' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) constructor should have an addCategory EventEmitter' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #onSubmit() should emit the new category via addCategory' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #onSubmit() should emit the updated category value via addCategory when editing' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should patch the formGroup when category is set to an object' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should do nothing if there is not a real change' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should reset the formGroup when category is set to null' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() should have a name control' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() name field should be required' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() name field should enforce a 3 character minimum length' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() should have a name control' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() name field should be required' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() name field should enforce a 3 character minimum length' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) constructor should have an addCategory EventEmitter' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) constructor should build the formGroup via #buildForm()' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #onSubmit() should emit the new category via addCategory' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #onSubmit() should emit the updated category value via addCategory when editing' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should do nothing if there is not a real change' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should patch the formGroup when category is set to an object' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should reset the formGroup when category is set to null' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) constructor should build the formGroup via #buildForm()' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) constructor should have an addCategory EventEmitter' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() name field should be required' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() name field should enforce a 3 character minimum length' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() should have a name control' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #onSubmit() should emit the new category via addCategory' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #onSubmit() should emit the updated category value via addCategory when editing' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should patch the formGroup when category is set to an object' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should do nothing if there is not a real change' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should reset the formGroup when category is set to null' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) constructor should have an addCategory EventEmitter' duration='2'/>
        <testCase name='CategoryFormComponent (Unit) constructor should build the formGroup via #buildForm()' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #onSubmit() should emit the new category via addCategory' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #onSubmit() should emit the updated category value via addCategory when editing' duration='2'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should reset the formGroup when category is set to null' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should patch the formGroup when category is set to an object' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should do nothing if there is not a real change' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() should have a name control' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() name field should enforce a 3 character minimum length' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() name field should be required' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #onSubmit() should emit the updated category value via addCategory when editing' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #onSubmit() should emit the new category via addCategory' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should do nothing if there is not a real change' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should patch the formGroup when category is set to an object' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) OnChanges should reset the formGroup when category is set to null' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() should have a name control' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() name field should enforce a 3 character minimum length' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) #buildForm() name field should be required' duration='0'/>
        <testCase name='CategoryFormComponent (Unit) constructor should build the formGroup via #buildForm()' duration='1'/>
        <testCase name='CategoryFormComponent (Unit) constructor should have an addCategory EventEmitter' duration='0'/>
    </file>
    <file path='src/app/services/employees/employees.service.spec.ts'>
        <testCase name='EmployeesService should be created' duration='4'/>
        <testCase name='EmployeesService getByEmail should query the cache for an employee with the given email' duration='11'/>
        <testCase name='EmployeesService getByEmail should query the cache for an employee with the given email' duration='6'/>
        <testCase name='EmployeesService should be created' duration='5'/>
        <testCase name='EmployeesService getByEmail should query the cache for an employee with the given email' duration='10'/>
        <testCase name='EmployeesService should be created' duration='5'/>
        <testCase name='EmployeesService getByEmail should query the cache for an employee with the given email' duration='28'/>
        <testCase name='EmployeesService should be created' duration='6'/>
        <testCase name='EmployeesService getByEmail should query the cache for an employee with the given email' duration='7'/>
        <testCase name='EmployeesService should be created' duration='4'/>
    </file>
    <file path='src/app/employee/employee-form/skills-form/skills-form.component.spec.ts'>
        <testCase name='SkillsFormComponent should create' duration='111'/>
        <testCase name='SkillsFormComponent should create' duration='125'/>
        <testCase name='SkillsFormComponent should create' duration='120'/>
        <testCase name='SkillsFormComponent should create' duration='143'/>
        <testCase name='SkillsFormComponent should create' duration='141'/>
    </file>
    <file path='src/app/auth/auth.guard.spec.ts'>
        <testCase name='AuthGuard handleCheck() should check roles and navigate to /home if not allowed' duration='5'/>
        <testCase name='AuthGuard handleCheck() should route to /login if not logged in' duration='4'/>
        <testCase name='AuthGuard handleCheck() should check roles and return true if allowed' duration='5'/>
        <testCase name='AuthGuard should create' duration='5'/>
        <testCase name='AuthGuard should create' duration='5'/>
        <testCase name='AuthGuard handleCheck() should check roles and return true if allowed' duration='4'/>
        <testCase name='AuthGuard handleCheck() should route to /login if not logged in' duration='5'/>
        <testCase name='AuthGuard handleCheck() should check roles and navigate to /home if not allowed' duration='4'/>
        <testCase name='AuthGuard handleCheck() should check roles and navigate to /home if not allowed' duration='7'/>
        <testCase name='AuthGuard handleCheck() should check roles and return true if allowed' duration='5'/>
        <testCase name='AuthGuard handleCheck() should route to /login if not logged in' duration='7'/>
        <testCase name='AuthGuard should create' duration='5'/>
        <testCase name='AuthGuard should create' duration='7'/>
        <testCase name='AuthGuard handleCheck() should route to /login if not logged in' duration='5'/>
        <testCase name='AuthGuard handleCheck() should check roles and return true if allowed' duration='4'/>
        <testCase name='AuthGuard handleCheck() should check roles and navigate to /home if not allowed' duration='4'/>
        <testCase name='AuthGuard handleCheck() should check roles and navigate to /home if not allowed' duration='5'/>
        <testCase name='AuthGuard handleCheck() should route to /login if not logged in' duration='5'/>
        <testCase name='AuthGuard handleCheck() should check roles and return true if allowed' duration='4'/>
        <testCase name='AuthGuard should create' duration='4'/>
    </file>
    <file path='src/app/error/error.component.spec.ts'>
        <testCase name='ErrorComponent should create' duration='8'/>
        <testCase name='ErrorComponent should create' duration='9'/>
        <testCase name='ErrorComponent should create' duration='12'/>
        <testCase name='ErrorComponent should create' duration='11'/>
        <testCase name='ErrorComponent should create' duration='10'/>
    </file>
    <file path='src/app/employee/employee-list/employee-list.component.spec.ts'>
        <testCase name='EmployeeListComponent should create' duration='181'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should create' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should create' duration='1'/>
        <testCase name='EmployeeListComponent should create' duration='219'/>
        <testCase name='EmployeeListComponent should create' duration='183'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should create' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should create' duration='1'/>
        <testCase name='EmployeeListComponent should create' duration='219'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should create' duration='2'/>
        <testCase name='EmployeeListComponent should create' duration='190'/>
    </file>
    <file path='src/app/home/chart/chart.component.spec.ts'>
        <testCase name='ChartComponent should create' duration='94'/>
        <testCase name='ChartComponent should create' duration='103'/>
        <testCase name='ChartComponent should create' duration='110'/>
        <testCase name='ChartComponent should create' duration='119'/>
        <testCase name='ChartComponent should create' duration='112'/>
    </file>
    <file path='src/app/services/abstract/base-crud.service.spec.ts'>
        <testCase name='BaseCrudService create should update the cache' duration='11'/>
        <testCase name='BaseCrudService create should return the newly created item' duration='11'/>
        <testCase name='BaseCrudService create should fire an http.post() call to the endpoint' duration='9'/>
        <testCase name='BaseCrudService delete should fire an http.put() call to the endpoint' duration='7'/>
        <testCase name='BaseCrudService delete should update the cache' duration='8'/>
        <testCase name='BaseCrudService fetch should return the list of items' duration='12'/>
        <testCase name='BaseCrudService fetch should update the cache' duration='8'/>
        <testCase name='BaseCrudService fetch should fire an http.get() call to the endpoint' duration='7'/>
        <testCase name='BaseCrudService resolve should call fetch' duration='7'/>
        <testCase name='BaseCrudService getById should fire an http.get() call with the id in the url' duration='10'/>
        <testCase name='BaseCrudService getById should return the fetched item' duration='10'/>
        <testCase name='BaseCrudService update should update the cache' duration='7'/>
        <testCase name='BaseCrudService update should return the newly updated item' duration='9'/>
        <testCase name='BaseCrudService update should fire an http.put() call to the endpoint' duration='7'/>
        <testCase name='BaseCrudService fetch should update the cache' duration='14'/>
        <testCase name='BaseCrudService fetch should return the list of items' duration='11'/>
        <testCase name='BaseCrudService fetch should fire an http.get() call to the endpoint' duration='9'/>
        <testCase name='BaseCrudService getById should return the fetched item' duration='13'/>
        <testCase name='BaseCrudService getById should fire an http.get() call with the id in the url' duration='8'/>
        <testCase name='BaseCrudService resolve should call fetch' duration='9'/>
        <testCase name='BaseCrudService delete should fire an http.put() call to the endpoint' duration='8'/>
        <testCase name='BaseCrudService delete should update the cache' duration='9'/>
        <testCase name='BaseCrudService create should update the cache' duration='10'/>
        <testCase name='BaseCrudService create should fire an http.post() call to the endpoint' duration='8'/>
        <testCase name='BaseCrudService create should return the newly created item' duration='10'/>
        <testCase name='BaseCrudService update should return the newly updated item' duration='11'/>
        <testCase name='BaseCrudService update should update the cache' duration='8'/>
        <testCase name='BaseCrudService update should fire an http.put() call to the endpoint' duration='13'/>
        <testCase name='BaseCrudService create should fire an http.post() call to the endpoint' duration='10'/>
        <testCase name='BaseCrudService create should update the cache' duration='12'/>
        <testCase name='BaseCrudService create should return the newly created item' duration='10'/>
        <testCase name='BaseCrudService getById should return the fetched item' duration='9'/>
        <testCase name='BaseCrudService getById should fire an http.get() call with the id in the url' duration='8'/>
        <testCase name='BaseCrudService fetch should return the list of items' duration='9'/>
        <testCase name='BaseCrudService fetch should fire an http.get() call to the endpoint' duration='11'/>
        <testCase name='BaseCrudService fetch should update the cache' duration='9'/>
        <testCase name='BaseCrudService resolve should call fetch' duration='7'/>
        <testCase name='BaseCrudService delete should update the cache' duration='8'/>
        <testCase name='BaseCrudService delete should fire an http.put() call to the endpoint' duration='11'/>
        <testCase name='BaseCrudService update should update the cache' duration='8'/>
        <testCase name='BaseCrudService update should return the newly updated item' duration='9'/>
        <testCase name='BaseCrudService update should fire an http.put() call to the endpoint' duration='8'/>
        <testCase name='BaseCrudService resolve should call fetch' duration='10'/>
        <testCase name='BaseCrudService update should fire an http.put() call to the endpoint' duration='8'/>
        <testCase name='BaseCrudService update should return the newly updated item' duration='10'/>
        <testCase name='BaseCrudService update should update the cache' duration='7'/>
        <testCase name='BaseCrudService getById should fire an http.get() call with the id in the url' duration='7'/>
        <testCase name='BaseCrudService getById should return the fetched item' duration='9'/>
        <testCase name='BaseCrudService create should fire an http.post() call to the endpoint' duration='9'/>
        <testCase name='BaseCrudService create should return the newly created item' duration='10'/>
        <testCase name='BaseCrudService create should update the cache' duration='7'/>
        <testCase name='BaseCrudService fetch should return the list of items' duration='8'/>
        <testCase name='BaseCrudService fetch should update the cache' duration='7'/>
        <testCase name='BaseCrudService fetch should fire an http.get() call to the endpoint' duration='7'/>
        <testCase name='BaseCrudService delete should fire an http.put() call to the endpoint' duration='9'/>
        <testCase name='BaseCrudService delete should update the cache' duration='7'/>
        <testCase name='BaseCrudService resolve should call fetch' duration='11'/>
        <testCase name='BaseCrudService create should fire an http.post() call to the endpoint' duration='7'/>
        <testCase name='BaseCrudService create should return the newly created item' duration='9'/>
        <testCase name='BaseCrudService create should update the cache' duration='10'/>
        <testCase name='BaseCrudService getById should return the fetched item' duration='12'/>
        <testCase name='BaseCrudService getById should fire an http.get() call with the id in the url' duration='9'/>
        <testCase name='BaseCrudService fetch should fire an http.get() call to the endpoint' duration='7'/>
        <testCase name='BaseCrudService fetch should return the list of items' duration='11'/>
        <testCase name='BaseCrudService fetch should update the cache' duration='8'/>
        <testCase name='BaseCrudService delete should update the cache' duration='12'/>
        <testCase name='BaseCrudService delete should fire an http.put() call to the endpoint' duration='9'/>
        <testCase name='BaseCrudService update should update the cache' duration='9'/>
        <testCase name='BaseCrudService update should return the newly updated item' duration='9'/>
        <testCase name='BaseCrudService update should fire an http.put() call to the endpoint' duration='9'/>
    </file>
    <file path='src/app/admin/manage-categories/category-list/category-list.component.spec.ts'>
        <testCase name='CategoryListComponent should create' duration='104'/>
        <testCase name='CategoryListComponent should create' duration='106'/>
        <testCase name='CategoryListComponent should create' duration='109'/>
        <testCase name='CategoryListComponent should create' duration='104'/>
        <testCase name='CategoryListComponent should create' duration='116'/>
    </file>
    <file path='src/app/employee/employee-form/contact-form/contact-form.component.spec.ts'>
        <testCase name='ContactFormComponent should create' duration='142'/>
        <testCase name='ContactFormComponent should create' duration='148'/>
        <testCase name='ContactFormComponent should create' duration='153'/>
        <testCase name='ContactFormComponent should create' duration='169'/>
        <testCase name='ContactFormComponent should create' duration='182'/>
    </file>
    <file path='src/app/employee/employee-list/list-controls/list-controls.component.unit.spec.ts'>
        <testCase name='ListControlsComponent (Unit) #buildForm() should have a skillFilter control' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #buildForm() should have a nameFilter control' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #constructor() should build the formGroup' duration='0'/>
        <testCase name='ListControlsComponent (Unit) getters should have a getter for nameFilter' duration='5'/>
        <testCase name='ListControlsComponent (Unit) getters should have a getter for skillFilterInput' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #remove() should remove the designated skill from the skillFilters$ list' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #remove() should not do anything if the skill cannot be found in the list' duration='1'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should filter to matches when the skillFilterInput input value changes' duration='2'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should filter to chosen skill when the skillFilterInput is set to an ISkill' duration='2'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should show all skills by default' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #add() should reset the skillInput FormControl' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #add() should not add the skill if it cannot be found' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #add() should add the skill to the skillFilters$ list' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #selected() should reset the skillFilterInput' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #selected() should not add anything if the skill does not exist' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #selected() should add the selected skill to skillFilters$' duration='3'/>
        <testCase name='ListControlsComponent (Unit) getters should have a getter for skillFilterInput' duration='2'/>
        <testCase name='ListControlsComponent (Unit) getters should have a getter for nameFilter' duration='2'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should filter to chosen skill when the skillFilterInput is set to an ISkill' duration='3'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should filter to matches when the skillFilterInput input value changes' duration='2'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should show all skills by default' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #add() should add the skill to the skillFilters$ list' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #add() should not add the skill if it cannot be found' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #add() should reset the skillInput FormControl' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #buildForm() should have a nameFilter control' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #buildForm() should have a skillFilter control' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #constructor() should build the formGroup' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #selected() should add the selected skill to skillFilters$' duration='3'/>
        <testCase name='ListControlsComponent (Unit) #selected() should not add anything if the skill does not exist' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #selected() should reset the skillFilterInput' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #remove() should remove the designated skill from the skillFilters$ list' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #remove() should not do anything if the skill cannot be found in the list' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #buildForm() should have a nameFilter control' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #buildForm() should have a skillFilter control' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #constructor() should build the formGroup' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #selected() should not add anything if the skill does not exist' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #selected() should add the selected skill to skillFilters$' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #selected() should reset the skillFilterInput' duration='0'/>
        <testCase name='ListControlsComponent (Unit) getters should have a getter for nameFilter' duration='1'/>
        <testCase name='ListControlsComponent (Unit) getters should have a getter for skillFilterInput' duration='2'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should filter to chosen skill when the skillFilterInput is set to an ISkill' duration='2'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should filter to matches when the skillFilterInput input value changes' duration='2'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should show all skills by default' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #remove() should not do anything if the skill cannot be found in the list' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #remove() should remove the designated skill from the skillFilters$ list' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #add() should not add the skill if it cannot be found' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #add() should add the skill to the skillFilters$ list' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #add() should reset the skillInput FormControl' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #constructor() should build the formGroup' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #selected() should reset the skillFilterInput' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #selected() should add the selected skill to skillFilters$' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #selected() should not add anything if the skill does not exist' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #remove() should not do anything if the skill cannot be found in the list' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #remove() should remove the designated skill from the skillFilters$ list' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #add() should not add the skill if it cannot be found' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #add() should add the skill to the skillFilters$ list' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #add() should reset the skillInput FormControl' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #buildForm() should have a nameFilter control' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #buildForm() should have a skillFilter control' duration='0'/>
        <testCase name='ListControlsComponent (Unit) getters should have a getter for skillFilterInput' duration='2'/>
        <testCase name='ListControlsComponent (Unit) getters should have a getter for nameFilter' duration='1'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should show all skills by default' duration='4'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should filter to chosen skill when the skillFilterInput is set to an ISkill' duration='4'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should filter to matches when the skillFilterInput input value changes' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #selected() should add the selected skill to skillFilters$' duration='3'/>
        <testCase name='ListControlsComponent (Unit) #selected() should reset the skillFilterInput' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #selected() should not add anything if the skill does not exist' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #buildForm() should have a nameFilter control' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #buildForm() should have a skillFilter control' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #remove() should remove the designated skill from the skillFilters$ list' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #remove() should not do anything if the skill cannot be found in the list' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #add() should add the skill to the skillFilters$ list' duration='2'/>
        <testCase name='ListControlsComponent (Unit) #add() should reset the skillInput FormControl' duration='0'/>
        <testCase name='ListControlsComponent (Unit) #add() should not add the skill if it cannot be found' duration='1'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should show all skills by default' duration='2'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should filter to matches when the skillFilterInput input value changes' duration='2'/>
        <testCase name='ListControlsComponent (Unit) filteredSkills$ should filter to chosen skill when the skillFilterInput is set to an ISkill' duration='2'/>
        <testCase name='ListControlsComponent (Unit) getters should have a getter for skillFilterInput' duration='1'/>
        <testCase name='ListControlsComponent (Unit) getters should have a getter for nameFilter' duration='1'/>
        <testCase name='ListControlsComponent (Unit) #constructor() should build the formGroup' duration='1'/>
    </file>
    <file path='src/app/employee/employee-list/employee-list.component.unit.spec.ts'>
        <testCase name='EmployeeListComponent (Unit) #filterEmployeeBySkills() should set the skills value on dataFilter$' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #skillAriaLabel() should return a nicely formatted string' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on name and skills' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on skills' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on last name' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on first name' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #filterEmployeeByName() should set the name value on dataFilter$' duration='3'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should not display the edit column user is not an admin' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should add the edit column if user is admin' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on name and skills' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on skills' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on first name' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on last name' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #filterEmployeeBySkills() should set the skills value on dataFilter$' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #filterEmployeeByName() should set the name value on dataFilter$' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should add the edit column if user is admin' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should not display the edit column user is not an admin' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #skillAriaLabel() should return a nicely formatted string' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should not display the edit column user is not an admin' duration='4'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should add the edit column if user is admin' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #filterEmployeeByName() should set the name value on dataFilter$' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #filterEmployeeBySkills() should set the skills value on dataFilter$' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on last name' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on first name' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on name and skills' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on skills' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #skillAriaLabel() should return a nicely formatted string' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should not display the edit column user is not an admin' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should add the edit column if user is admin' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #filterEmployeeByName() should set the name value on dataFilter$' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #filterEmployeeBySkills() should set the skills value on dataFilter$' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #skillAriaLabel() should return a nicely formatted string' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on name and skills' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on skills' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on first name' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on last name' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should add the edit column if user is admin' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #constructor() should not display the edit column user is not an admin' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on skills' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on last name' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on name and skills' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #employeeFilterPredicate() should filter on first name' duration='1'/>
        <testCase name='EmployeeListComponent (Unit) #skillAriaLabel() should return a nicely formatted string' duration='0'/>
        <testCase name='EmployeeListComponent (Unit) #filterEmployeeByName() should set the name value on dataFilter$' duration='2'/>
        <testCase name='EmployeeListComponent (Unit) #filterEmployeeBySkills() should set the skills value on dataFilter$' duration='1'/>
    </file>
    <file path='src/app/employee/employee-form/bio-form/bio-form.component.spec.ts'>
        <testCase name='BioFormComponent should create' duration='142'/>
        <testCase name='BioFormComponent should create' duration='198'/>
        <testCase name='BioFormComponent should create' duration='133'/>
        <testCase name='BioFormComponent should create' duration='144'/>
        <testCase name='BioFormComponent should create' duration='151'/>
    </file>
    <file path='src/app/abstracts/base-form.class.spec.ts'>
        <testCase name='BaseForm should provide a formReady emitter' duration='2'/>
        <testCase name='BaseForm #deregisterForm() should remove the control based on name provided' duration='4'/>
        <testCase name='BaseForm should create an instance' duration='0'/>
        <testCase name='BaseForm #registerForm() should set the provided control to the provided value' duration='1'/>
        <testCase name='BaseForm #emitFormReady() should emit the provided AbstractControl' duration='2'/>
        <testCase name='BaseForm #emitFormReady() should emit the formGroup by default' duration='2'/>
        <testCase name='BaseForm #emitFormReady() should emit the provided AbstractControl' duration='3'/>
        <testCase name='BaseForm #emitFormReady() should emit the formGroup by default' duration='3'/>
        <testCase name='BaseForm #registerForm() should set the provided control to the provided value' duration='0'/>
        <testCase name='BaseForm #deregisterForm() should remove the control based on name provided' duration='0'/>
        <testCase name='BaseForm should provide a formReady emitter' duration='0'/>
        <testCase name='BaseForm should create an instance' duration='1'/>
        <testCase name='BaseForm #emitFormReady() should emit the formGroup by default' duration='3'/>
        <testCase name='BaseForm #emitFormReady() should emit the provided AbstractControl' duration='2'/>
        <testCase name='BaseForm #registerForm() should set the provided control to the provided value' duration='0'/>
        <testCase name='BaseForm #deregisterForm() should remove the control based on name provided' duration='0'/>
        <testCase name='BaseForm should provide a formReady emitter' duration='0'/>
        <testCase name='BaseForm should create an instance' duration='0'/>
        <testCase name='BaseForm #registerForm() should set the provided control to the provided value' duration='0'/>
        <testCase name='BaseForm #emitFormReady() should emit the formGroup by default' duration='2'/>
        <testCase name='BaseForm #emitFormReady() should emit the provided AbstractControl' duration='1'/>
        <testCase name='BaseForm #deregisterForm() should remove the control based on name provided' duration='1'/>
        <testCase name='BaseForm should create an instance' duration='0'/>
        <testCase name='BaseForm should provide a formReady emitter' duration='0'/>
        <testCase name='BaseForm should provide a formReady emitter' duration='4'/>
        <testCase name='BaseForm should create an instance' duration='0'/>
        <testCase name='BaseForm #registerForm() should set the provided control to the provided value' duration='0'/>
        <testCase name='BaseForm #emitFormReady() should emit the formGroup by default' duration='3'/>
        <testCase name='BaseForm #emitFormReady() should emit the provided AbstractControl' duration='1'/>
        <testCase name='BaseForm #deregisterForm() should remove the control based on name provided' duration='0'/>
    </file>
    <file path='src/app/employee/employee-form/contact-form/address-form/address-form.component.spec.ts'>
        <testCase name='AddressFormComponent should compile' duration='122'/>
        <testCase name='AddressFormComponent should compile' duration='177'/>
        <testCase name='AddressFormComponent should compile' duration='124'/>
        <testCase name='AddressFormComponent should compile' duration='178'/>
        <testCase name='AddressFormComponent should compile' duration='138'/>
    </file>
</testExecutions>